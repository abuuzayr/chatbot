let customTemplateAlternativequestions="{{!-- <div class='template-content'>" + "<div class=\"kai-chat-message kai-left kai-generic-template-wrapper kai-has-previous kai-alt-answer alt-questions-template-wrapper\">" + "<div class=\"kai-generic-template-background\">" + "<div class=\"alt-carousel-arrows\">" + "<div class=\"kai-alt-left-arrow-wrap\" style=\"display:none;\">" + "<i class=\"fa fa-angle-left kai-left-arrow\" aria-hidden=\"true\"></i>" + "</div>" + "<div class=\"kai-alt-right-arrow-wrap\" style=\"display:none;\">" + "<i class=\"fa fa-angle-right kai-right-arrow\" aria-hidden=\"true\"></i>" + "</div>" + "</div>" + "<div class=\"alt-carousel-content-wrap\">" + "{{#each contents}}" + "<div class=\"kai-generic-template\" index=\"{{@index}}\">" + "<div class=\"kai-title\" style=\"height: 54.8px;\">" + "<p>{{question}}</p>" + "</div>" + "" + "<div class=\"kai-alt-button\" payload=\"{{question}}\" payload_id=\"{{question_id}}\">View Answer</div>" + "</div>" + "        {{/each}}" + "        </div>" + "</div>" + "</div>" + "</div>" + " --}}";
Handlebars.registerHelper('breaklines',function(text) {
  text = text.replace(/(\r\n|\n|\r)/gm, '<br>');
  return text;
});
let customTemplateButton="<div class='kai-button-template'>" + "{{#each buttons}}" + "    <div class=\"kai-button\" payload=\"{{payload}}\" type=\"{{type}}\">{{label}}</div>" + "    {{/each}}" + "</div>";
let customTemplateCard="<div class=\"kai-card\">" + "    <div class=\"kai-image\" style=\"background-image: url('{{medium.medium_url}}');\"></div>" + "" + "    <div class=\"kai-text\">" + "        <h3 class=\"kai-title\">{{title}}</h3>" + "        <p class=\"kai-subtitle\">{{{breaklines subtitle}}}</p>" + "    </div>" + "" + "    {{#each buttons}}" + "    <div class=\"kai-button\" payload=\"{{payload}}\" type=\"{{type}}\">{{label}}</div>" + "    {{/each}}" + "</div>" + "";
let customTemplateCarousel="<div class='kai-carousel'>" + "    {{#if contents.[0].payload.medium.medium_url}}" + "    <div class=\"kai-carousel__img\">" + "    {{else}}" + "    <div class=\"kai-carousel__card\">" + "    {{/if}}" + "      <div class=\"kai-carousel-arrows\">           " + "        <div class=\"kai-left-arrow-wrap\" style=\"display:none;\">" + "          <i class=\"fa fa-angle-left kai-left-arrow\" aria-hidden=\"true\"></i>" + "        </div>            " + "        <div class=\"kai-right-arrow-wrap\">" + "          <i class=\"fa fa-angle-right kai-right-arrow\" aria-hidden=\"true\"></i>" + "        </div>            " + "      </div>" + "" + "      <div class=\"kai-carousel-content\">" + "      {{#each contents}}" + "        {{#with payload}}" + "            <div class=\"kai-carousel-item\" index=\"{{@index}}\">" + "            {{#if medium.medium_url}}" + "                <div class=\"kai-image\" style=\"background-image: url('{{medium.medium_url}}');\"></div>" + "            {{/if}}" + "                <div class=\"kai-text\">" + "                    <div class='custom-text-1'>THIS IS CUSTOM</div>" + "                    <h3 class=\"kai-title\">{{title}}</h3>" + "                    <p class=\"kai-subtitle\">{{{breaklines subtitle}}}</p>" + "                </div>" + "                {{#each buttons}}" + "                <div class=\"kai-button\" payload=\"{{payload}}\" type=\"{{type}}\">{{label}}</div>" + "                {{/each}}" + "            </div>" + "        {{/with}}" + "        {{/each}}" + "        </div>" + "    </div>" + "</div>";
Handlebars.registerHelper('compare',// Compare handlebar helper
// Handlebars.registerHelper('compare', function (lvalue, operator, rvalue, options) {
function(lvalue, operator, rvalue, options) {
  var operators, result;

  if (arguments.length < 3) {
    throw new Error("Handlerbars Helper 'compare' needs 2 parameters");
  }

  if (options === undefined) {
    options = rvalue;
    rvalue = operator;
    operator = '===';
  }

  operators = {
    '==': function(l, r) {
      return l == r;
    },
    '===': function(l, r) {
      return l === r;
    },
    '!=': function(l, r) {
      return l != r;
    },
    '!==': function(l, r) {
      return l !== r;
    },
    '<': function(l, r) {
      return l < r;
    },
    '>': function(l, r) {
      return l > r;
    },
    '<=': function(l, r) {
      return l <= r;
    },
    '>=': function(l, r) {
      return l >= r;
    },
    typeof: function(l, r) {
      return typeof l == r;
    }
  };

  if (!operators[operator]) {
    throw new Error("Handlerbars Helper 'compare' doesn't know the operator " + operator);
  }

  result = operators[operator](lvalue, rvalue);

  if (result) {
    return options.fn(this);
  } else {
    return options.inverse(this);
  }
});
let customTemplateList="{{#with contents}}" + "{{[0].payload.buttons.[0].labels}}" + "<header style='background: linear-gradient(to right, rgba(0,0,0,0.8) 0%,rgba(0,0,0,0.8) 15%,rgba(0,0,0,0.8) 20%,rgba(0,0,0,0) 50%,rgba(0,0,0,0.77) 80%,rgba(0,0,0,0.8) 81%,rgba(0,0,0,0.8) 85%,rgba(0,0,0,0.8) 100%) no-repeat 0 0, url(images/test/tshirt-bg.png) no-repeat center center;' class=\"heading\" >" + "    <h3 class=\"title\">{{[0].payload.title}}</h3>" + "    <p class=\"message\">{{[0].payload.subtitle}}</p>" + "    {{#with [0].payload.buttons}}" + "    <a href=\"{{[0].payload.buttons}}\" class=\"button list-button\">{{[0].label}}</a>" + "    {{/with}}" + "</header>" + "{{/with}}" + "{{#each contents}}" + "<div class=\"item\">" + "    <div class=\"item-wrapper\">" + "        <h3 class=\"title\">{{payload.title}}</h3>" + "        <p class=\"message\">{{payload.subtitle}}</p>" + "        <!-- <p class=\"message\"><a href=\"#\">This is a link of some sort</a></p> -->" + "        {{#each payload.buttons}}" + "        <div class=\"list-button\" payload=\"{{payload}}\" type=\"{{type}}\">{{label}}</div>" + "        {{/each}}" + "    </div>" + "    <div class=\"img-wrapper\">" + "        <img src=\"images/test/tshirt-black.png\" alt=\"\">" + "    </div>" + "</div>" + "{{/each}}" + "" + "<div class=\"more\">" + "    <div>View More</div>" + "</div>";
Handlebars.registerHelper('slice',/* ####Iterate sliced #####
Iterate over a specific portion of a list. 

Usage: {{#slice items offset="1" limit="5"}}{{name}}{{/slice}} : items 1 thru 6 
{{#slice items limit="10"}}{{name}}{{/slice}} : items 0 thru 9 
{{#slice items offset="3"}}{{name}}{{/slice}} : items 3 thru context.length defaults are offset=0, limit=5 

*/

function(context, block) {
  var ret = '',
    offset = parseInt(block.hash.offset) || 0,
    limit = parseInt(block.hash.limit) || 5,
    i = offset < context.length ? offset : 0,
    j = limit + offset < context.length ? limit + offset : context.length;

  for (i, j; i < j; i++) {
    ret += block.fn(context[i]);
  }

  return ret;
});
let customTemplateTyping="<div class=\"kai-user-wrapper bot\">" + "<div class=\"kai-user-icon\" style=\"top: 28.875px;\"><img class=\"kai-bot-logo\" src=\"images/custom/chat-icon.png\"></div>" + "<div class=\"kai-chat-row\">" + "<div class=\"kai-chat-message kai-left kai-typing-indicator\">" + "<span></span><span></span><span></span>" + "</div>" + "</div>" + "</div>";